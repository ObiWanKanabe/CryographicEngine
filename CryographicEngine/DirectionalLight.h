#ifndef DIRECTIONAL_LIGHT_H
#define DIRECTIONAL_LIGHT_H

#include "Light.h"

class DirectionalLight : public Light {
public:
	// A Directiona Light has a colour and direction
	DirectionalLight(glm::vec3 _colour, glm::vec3 _direction);

	// Binding the uniforms of the shader
	void BindUniforms(Shader* _shader, int pointIndex, int spotIndex);

	// Returns the light space matrix to be used when rendering objects to the lights depth map
	glm::mat4 GetLightSpaceMatrix(Camera *camera, int index);

	// Setting up each lights shadow configuration on creation
	virtual void ShadowSetup();

	// Preparing the shadow map for rendering, including changing the viewport and binding the FBO
	void PrepareShadow(int index);

	// This will opt out of the depth rendering based on early factors to increase performance
	bool HasShadows();

	// Utility Functions
	void SetColour(glm::vec3 _colour);
	void SetAmbientColour(glm::vec3 _ambient);
	void SetDiffuseColour(glm::vec3 _diffuse);
	void SetSpecularColour(glm::vec3 _specular);
	void SetPosition(glm::vec3 _posiition);
	void SetDirection(glm::vec3 _direction);

	glm::vec3 GetColour();
	glm::vec3 GetAmbientColour();
	glm::vec3 GetDiffuseColour();
	glm::vec3 GetSpecularColour();
	glm::vec3 GetPosition();
	glm::vec3 GetDirection();

	int GetNumDepthMaps();

private:

	// Ambient colour of the light
	glm::vec3 ambient;

	// Main diffuse colour of the light
	glm::vec3 diffuse;

	// Shine colour of the light
	glm::vec3 specular;

	// Direction of the spotlight
	// Measured in a unit vector
	glm::vec3 direction;

	// The Framebuffer object of the depth map being generated by the light
	unsigned int depthMapFBO[4];

	// The depth map ID on the GPU
	unsigned int depthMap[4];

	// The size of the frustum 
	float frustum_size[4];

	// The size of the shadow and its resolution
	const unsigned int shadowSize = 1024;

	// The near and far planes of the perspective projection frustum
	float near_plane[4], far_plane[4];

	// The light space matrix to view the object from the lights POV
	glm::mat4 lightSpaceMatrix[4];
	
	// The number of cascades to be rendered to during depth map generation
	int numCascades;
};

#endif

