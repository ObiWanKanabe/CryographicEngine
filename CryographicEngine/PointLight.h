#ifndef POINT_LIGHT_H
#define POINT_LIGHT_H

#include "Light.h"

class PointLight : public Light {
public:
	// A SpotLight has a colour, position, direction, attenuation values and inner and outer cutoff
	PointLight(glm::vec3 _colour, glm::vec3 _position, float _linear, float _quadratic);

	// Binding the uniforms of the shader
	void BindUniforms(Shader* _shader, int pointIndex, int spotIndex);

	// Returns the light space matrix to be used when rendering objects to the lights depth map
	glm::mat4 GetLightSpaceMatrix(Camera *camera, Window* window, int index);

	// Setting up each lights shadow configuration on creation
	virtual void ShadowSetup();

	// Preparing the shadow map for rendering, including changing the viewport and binding the FBO
	void PrepareShadow(int index);

	// This will opt out of the depth rendering based on early factors to increase performance
	bool HasShadows();

	// Utility Functions
	void SetColour(glm::vec3 _colour);
	void SetAmbientColour(glm::vec3 _ambient);
	void SetDiffuseColour(glm::vec3 _diffuse);
	void SetSpecularColour(glm::vec3 _specular);
	void SetPosition(glm::vec3 _posiition);
	void SetLinear(float _linear);
	void SetQuadratic(float _quadratic);

	glm::vec3 GetColour();
	glm::vec3 GetAmbientColour();
	glm::vec3 GetDiffuseColour();
	glm::vec3 GetSpecularColour();
	glm::vec3 GetPosition();
	float GetLinear();
	float GetQuadratic();

	int GetNumDepthMaps();

private:

	// To save time during rendering and increase performance, shadow maps can be generated during initialization
	// and reused for every frame. Note that if a dynamic gameobject is in range of the light view frustum during the 
	// light's initiliazion, and the gameobject is not tagged as dynamic, the shadows will be incorrect.
	bool updateShadows;

	// Ambient colour of the light
	glm::vec3 ambient;

	// Main diffuse colour of the light
	glm::vec3 diffuse;

	// Shine colour of the light
	glm::vec3 specular;

	// Position of the light in world space
	glm::vec3 position;

	// Linear of the spotlight to calculate attenuation
	// Reduces the intensity in a linear way
	float linear;

	// Quadratic of the spotlight to calculate attenuation
	// Reduces the intensity in a quadratric way
	float quadratic;

	// The Framebuffer object of the depth map being generated by the light
	unsigned int depthMapFBO;

	// The depth map ID on the GPU
	unsigned int depthMap;

	// The size of the shadow and its resolution
	const unsigned int shadowSize = 1024;

	// The near and far planes of the perspective projection frustum
	float near_plane, far_plane;

	// The light space matrix to view the object from the lights POV
	glm::mat4 lightSpaceMatrix[6];
};

#endif
